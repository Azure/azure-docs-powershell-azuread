environment:
  github_access_token:
    secure: JSOJKfdgXW09TdfN75l84f7+22GElWNgPo1Vab449RFYe8+BEbO/btueR3g0qldG

build_script:
  - ps: |
      Write-Host "Begin processing files"
      # assume there is only one root folder in source repo
      if((Get-ChildItem $env:APPVEYOR_BUILD_FOLDER -Directory).count -ne 1)
      {
        $host.SetShouldExit(-1)
      }

      $root_folder = (Get-ChildItem $env:APPVEYOR_BUILD_FOLDER -Directory | Select-Object FullName -last 1).FullName
      $files = Get-ChildItem -Path $root_folder -Recurse | where {$_.extension -eq $env:extension} | % { $_.FullName }
      $script_block = {
        param($file)
        $pattern = '^(?s)\s*[-]{3}(.*?)[-]{3}\r?\n'
        
        function set_or_update_metadata ($header, $new_header, $key, $value, $overwrite=$false)
        {
          if($header -match "$key[\s\S].*" -and $overwrite)
          {
            $new_header = $new_header.replace($matches[0], $key + ': ' + $value)
          }
          if($header -notmatch "$key[\s\S].*")
          {
            $new_header = $new_header + $key + ': ' + $value + "`r`n"
          }
          return $new_header
        }
        
        if((Get-Content $file | Out-String) -notmatch $pattern)
        {
          continue
        }

        $header = $matches[1]
        $new_header = $matches[1]

        # set or update metadata
        $date = git log --pretty=format:%cd -n 1 --date=iso $file
        $new_header = set_or_update_metadata $header $new_header 'updated_at' (Get-Date $date -format g) $true

        $new_header = set_or_update_metadata $header $new_header 'ms.date' (Get-Date $date -format d) $true

        Set-Location $env:APPVEYOR_BUILD_FOLDER
        $file_rel_path = (Get-Item $file | Resolve-Path -Relative)
        $content_git_url = (New-Object System.Uri ('https://github.com/' + $env:APPVEYOR_REPO_NAME + '/blob/' + $env:APPVEYOR_REPO_BRANCH + '/' + $file_rel_path)).AbsoluteUri
        $new_header = set_or_update_metadata $header $new_header 'content_git_url' $content_git_url  $true

        $git_commit_url = (New-Object System.Uri ('https://github.com/' + $env:APPVEYOR_REPO_NAME + '/blob/' + (git rev-list -1 HEAD $file) + '/' + $file_rel_path)).AbsoluteUri
        $new_header = set_or_update_metadata $header $new_header 'gitcommit' $git_commit_url  $true

        $topic_type = 'reference'
        if($header -match 'Module Name')
        {
          $topic_type = 'conceptual'
        }
        $new_header = set_or_update_metadata $header $new_header 'ms.topic' $topic_type $true

        $new_header = set_or_update_metadata $header $new_header 'ms.prod' $env:prod
        $new_header = set_or_update_metadata $header $new_header 'ms.service' $env:service
        $new_header = set_or_update_metadata $header $new_header 'ms.technology' $env:technology
        $new_header = set_or_update_metadata $header $new_header 'author' $env:author
        $new_header = set_or_update_metadata $header $new_header 'keywords' $env:keywords
        $new_header = set_or_update_metadata $header $new_header 'manager' $env:manager

        # filter invalid characters
        if($header -match '{{' -or $header -match '}}')
        {
          $new_header = $new_header.replace('{{', '').replace('}}', '')
        }

        Set-Content $file (Get-Content $file | Out-String).replace($header, $new_header) -NoNewline
      }
      $MaxThreads = 8
      $RunspacePool = [RunspaceFactory ]::CreateRunspacePool(1, $MaxThreads)
      $RunspacePool.Open()
      $Jobs = @()
      $files | % {
          $Job = [powershell]::Create().AddScript($script_block).AddArgument($_)
          $Job.RunspacePool = $RunspacePool
          $Jobs += New-Object PSObject -Property @{
            RunNum = $_
            Pipe = $Job
            Result = $Job.BeginInvoke()
          }
        }

      Write-Host "Waiting..."
      Do
      {
        Start-Sleep -Seconds 1
      } While ($Jobs.Result.IsCompleted -contains $false)
      Write-Host "Processing files completed!"
  - ps: |
      function GetToc
      {
        # assume there is only one root folder in source repo
        if((Get-ChildItem $env:APPVEYOR_BUILD_FOLDER -Directory).count -ne 1)
        {
          $host.SetShouldExit(-1)
        }
        $root_folder  = (Get-ChildItem $env:APPVEYOR_BUILD_FOLDER -Directory | Select-Object FullName -last 1).FullName
        $root_folder_name = Split-Path -Path $root_folder -Leaf
        $toc_path = Join-Path $root_folder "toc.yml"

        if(Test-Path $toc_path)
        {
          Remove-Item $toc_path
        }
        New-Item $toc_path
        Write-Host "constructing toc..."
        foreach($subFolder in (Get-ChildItem $root_folder -Directory | Select-Object FullName))
        {
          DoGetToc $subFolder.FullName $root_folder_name $toc_path $env.extension 0
        }
        Write-Host "constructing toc completed."
      }

      function global:DoGetToc($folderPath, $root_folder_name, $toc_path, $extension, $level)
      {
        $pre = ""

        for($i=0;$i -lt $level;$i++)
        {
          $pre = $pre + "    "
        }

        Add-Content -Path $toc_path -Value ($pre + "- name: " + (Split-Path -Path $folderPath -Leaf))
        $index = Get-ChildItem $folderPath | Where-Object {$_.Name -eq 'index.md'} | select -ExpandProperty FullName
        if($index -ne $null)
        {
          Add-Content -Path $toc_path -Value ($pre + "  href: " + (Get-Item $index | Resolve-Path -Relative).replace('\' + $root_folder_name, '.'))
        }
        $sub_folders = Get-ChildItem $folderPath -Directory

        if($sub_folders -eq $null)
        {
          $files = (Get-ChildItem $folderPath) | Where-Object { $_.Extension -eq $env:extension } | select -ExpandProperty FullName
          $landing_page = ""

          foreach($file in $files)
          {
            $found = (Get-Content $file | Out-String) -match '^(?s)\s*[-]{3}(.*?)[-]{3}\r?\n'
            if($found -and $matches[1] -match 'Module Name')
            {
              Add-Content -Path $toc_path -Value ($pre + "  href: " + (Get-Item $file | Resolve-Path -Relative).replace('\' + $root_folder_name, '.'))
              $landing_page = $file
              break
            }
          }
          Add-Content -Path $toc_path -Value ($pre + "  items:")
          $pre = $pre + "    "
          foreach($file in $files)
          {
            if($file -ne $landing_page)
            {
              Add-Content -Path $toc_path -Value ($pre + "- name: " + (Split-Path -Path $file -Leaf -Resolve).split('\.')[-2])
              Add-Content -Path $toc_path -Value ($pre + "  href: " + (Get-Item $file | Resolve-Path -Relative).replace('\' + $root_folder_name, '.'))
            }
          }
        }
        else
        {
          Add-Content -Path $toc_path -Value ($pre + "  items:")
          if($sub_folders[0].Name -match 'v\d(.\d)*')
          {
            $sub_folders = $sub_folders | Sort-Object -Property Name -Descending
          }
          foreach($sub_folder in $sub_folders)
          {
            DoGetToc $sub_folder.FullName $root_folder_name $toc_path $extension ($level+1)
          }
        }
      }
      GetToc
on_success:
  - git clone -q --branch=%target_branch% %content_repo% %TEMP%\Azure
  - ps: |
      # overwrite filds but not delete modules due to multiple repos input
      $source = Split-Path -Path (Get-ChildItem $env:APPVEYOR_BUILD_FOLDER -Directory | Select-Object FullName -last 1).FullName -Leaf
      foreach($folder in (Get-ChildItem $env:APPVEYOR_BUILD_FOLDER\$source -Directory | Select-Object FullName))
      {
        $folder_name = Split-Path -Path $folder.FullName -Leaf
        $target = Join-Path $env:TEMP\Azure $env:target_folder\$folder_name
        if(Test-Path $target)
        {
          Remove-Item $target -Recurse -Force
        }
        Copy-Item $env:APPVEYOR_BUILD_FOLDER\$source\$folder_name $target -recurse -Force
      }

      $toc_folder = Join-Path $env:TEMP\Azure $env:target_folder\$source

      if(Test-Path $toc_folder)
      {
        Remove-Item $toc_folder -Recurse -Force
      }

      # copy project toc
      New-Item $toc_folder -type Directory
      $toc = Join-Path $toc_folder 'toc.yml'
      Copy-item (Join-Path $env:APPVEYOR_BUILD_FOLDER\$source "toc.yml") $toc_folder
      Set-Content $toc (Get-Content $toc | Out-String).replace('\', '/') -NoNewline
      
      # copy project index
      $index = Join-Path $env:APPVEYOR_BUILD_FOLDER\$source "index.md"
      if(Test-Path $index)
      {
        Copy-item $index $toc_folder
      }

      # add content to global toc
      $global_toc = Join-Path $env:TEMP\Azure $env:target_folder\toc.yml
      if(!(Test-Path $global_toc))
      {
        New-Item $global_toc
      }
      if(!((Get-Content $global_toc | Out-String) -match $source))
      {
        Add-Content -Path $global_toc -Value ("- name: " + $source)
        if($index)
        {
          Add-Content -Path $global_toc -Value ("  href: " + $source + "/index.md")
        }
        Add-Content -Path $global_toc -Value ("  tocHref: " + $source + "/toc.yml")
      }
  - ps: |
      # update breadcrumb.json if there is newly added project (always add as level 3 node)

      $ErrorActionPreference = 'Stop'
      $source = Split-Path -Path (Get-ChildItem $env:APPVEYOR_BUILD_FOLDER -Directory | Select-Object FullName -last 1).FullName -Leaf
      $breadcrumb_path = Join-Path $env:TEMP\Azure $env:target_folder\breadcrumb.json
      $breadcrumb = (Get-Content -Raw $breadcrumb_path) | ConvertFrom-Json
      $children = $breadcrumb.children
      if($children -ne $null)
      {
        $new_node = $true
        foreach($c in $children.children)
        {
          if($c.href -match $source)
          {
            $new_node = $false
            break
          }
        }

        if($new_node)
        {
          Write-Host 'updating breadcrumb'
          $new_child = New-Object PSObject -Property @{
            href = $children[0].href + $source + "/"
            homepage = $children[0].href + $source + "/"
            toc_title = $source
            level = 3
          }

          if($children.children -eq $null)
          {
            $children | Add-Member -MemberType NoteProperty -Name children -value @($new_child)
          }
          else
          {
            $children.children += $new_child
          }

          # powershell read json array(one object array) issue, have to insert array mark manually
          Set-Content $breadcrumb_path ('[' + ($breadcrumb | ConvertTo-Json -Depth 5) + ']') -NoNewline
          Write-Host 'updating breadcrumb completed'
        }
      }
  - cd %TEMP%\Azure
  - git config --global credential.helper store
  - ps: Add-Content "$env:USERPROFILE\.git-credentials" "https://$($env:github_access_token):x-oauth-basic@github.com`n"
  - git config --global user.email %email%
  - git config --global user.name %name%
  - git add -A
  - git commit -m "Triggered by appveyor, update azuread docs."
  - git push origin %target_branch%