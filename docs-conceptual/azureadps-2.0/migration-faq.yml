### YamlMime:FAQ
metadata:
  title: 'Azure AD PowerShell to Microsoft Graph PowerShell migration FAQ'
  description: Answers to frequently asked questions about the migration from Azure AD PowerShell to Microsoft Graph PowerShell.
  ms.service: active-directory
  ms.workload: identity
  ms.topic: article
  ms.date: 02/22/2024
  ms.author: eunicewaweru
  author: msewaweru
title: Azure AD PowerShell to Microsoft Graph PowerShell migration FAQ
summary: This article provides answers to frequently asked questions about migrating from Azure AD PowerShell to Microsoft Graph PowerShell.

sections:
    - name: Ignored
      questions:
      - question: What happens to Azure AD PowerShell after March 2024?
        answer: |
          In June 2020, we announced the retirement of Azure AD Graph API in favor of the Microsoft Graph API, which provides all the functionality of Azure AD Graph along with new functionality. As a result, all applications calling the Azure AD Graph API would receive an error message from the endpoint after the original proposed retirement date of June 30, 2022. Azure AD PowerShell is one of the applications that utilizes the Azure AD Graph API. 
          
          Azure AD PowerShell has continued to function after June 2023 to allow users more time to migrate to [Microsoft Graph PowerShell](/powershell/microsoftgraph/overview). The Azure AD and Azure AD-Preview PowerShell modules are now deprecated on March 30, 2024. After the deprecation, the only support offered for this PowerShell module will be support in migrating to Microsoft Graph PowerShell SDK and security fixes. The module will continue to work for a minimum of six (6) months before being retired. We encourage you to migrate to Microsoft Graph PowerShell. 
          

      - question: What is Microsoft doing about the gaps in functionality between Azure AD and Microsoft Graph PowerShell modules?
        answer: |
          As part of the parity work, we're looking at the MSOnline (MSOL) and Azure AD PowerShell cmdlets mapping to Microsoft Graph PowerShell equivalent. To help with migration, see the [cmdlet map](/powershell/microsoftgraph/azuread-msoline-cmdlet-map)  of MSOnline and Azure AD PowerShell cmdlets to Microsoft Graph PowerShell. 
          
          We added tools such as the [Find-MgGraphCommand](/powershell/microsoftgraph/find-mg-graph-command) and [Find-MgGraphPermission](/powershell/microsoftgraph/find-mg-graph-permission) to help you find and use the appropriate Microsoft Graph PowerShell cmdlets.  

      - question: What is Microsoft doing to improve the Microsoft Graph PowerShell user experience?
        answer: |
          Microsoft Graph PowerShell cmdlets are autogenerated from the Microsoft Graph API schema. The process has its advantages, for example, providing a rich set of cmdlets that cover the whole API landscape and always up to date. The disadvantage is that the resultant cmdlets might not be user-friendly compared to human-authored cmdlets. We continue investing on the Microsoft Graph PowerShell usability and documentation improvements.  
          
          The Microsoft Graph PowerShell SDK is also open source and users can contribute to the usability work or add new scenarios requirements to manage Microsoft Entra ID.
          
      - question: How is Microsoft going to support users who are migrating to Microsoft Graph PowerShell?
        answer: |
          We're working on other tools that help migrate existing scripts that target Azure AD PowerShell so that these scripts use Microsoft Graph PowerShell cmdlets under the hood.
          
          Send us your feedback or suggestions on how we can improve Microsoft Entra ID management within Microsoft Graph PowerShell SDK by [logging an issue](https://github.com/microsoftgraph/msgraph-sdk-powershell/issues/new).          
